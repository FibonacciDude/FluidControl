
The purpose is simple: understand fluid dynamics well enough to be as good if not better
at manipulation of fluids as inventors. The manipulation is done through shaping the
morphology.

Understanding:
    Constraints:
        -extensible to cases where there is another gradient (like heat, or chemical) as
    well as different reynolds number (within a range?)
        -reasonably good dynamics - how to test (and be accurate in real world)
    qualitatively, but not be bottlenecked computationally (and learn only that necessary
            for reconstruction of simulation)
            -perhaps some other reconstruction where low-grain features are likely to be
            compressed
                ---"concept bottlenecked models"
                ---"coarse-grid cfd error prediction using ml"
                ---"multiscale cfd"
                ---"learning dynamical systems from partial observations"
                ---"learning data-driven discretization for pdes"
         -be able to understand deep regularities (one-way pipe) and homogeneity in these
         systems
        Computationally simple:
            -Non-explicit (or at least fine-grained) fluid simulation
                If it's non-explicit (and relatively constrained), then it will be able to take a model in real life
                (say a picture, video, or a 3d mesh) and infer the functions and it's
                behavior.

        Fast learning:
            -sampling "edge cases"
            -objective function

Manipulation of morphology:

    --- Interactive geometric domain iteration of massively parallel CFD simulation
    ---topology optimization using finite element solvers
    Cage handle meshed 

    Constraints:
        No floating components
        Regularization so there is no exploitation of slight variation or any simulation
        drawback - perhaps by making physically consistent

        Computationally simple:
            -Compositionally use abstract techniques from other designs (like use of
                    vortices, velocity obstruction, etc) to be able to "piece" it together
            relatively fast. Must understand these building blocks such that it's
            configurable, fast, and insightful (intepretable in the nature of fluids)
            -Simple prediction for behavior from network and backprop to interface with
            morphology (and then we have diff sim)

Networks:
    -Physically-https://asmedigitalcollection.asme.org/heattransfer/article-abstract/121/4/1076/430081/A-Residual-Based-Fuzzy-Logic-Algorithm-for-Control?redirectedFrom=fulltextinformed nns
    -Neural ordinary differential equations
        -adjoint state methods for gradients
    -variational autoencoders (and normalizing flows)
    -dynamic causal modelling

How to generalize to noise, chaos, and entropy directly (as differentiating through noise
        is unfeasable)
Exponential amount of degrees of freedom - compress representation of fluid motion and
object manipulation jointly.
Complex interactions - learn interactions and add non-locality to loss (maximize locality
        and non-interference)
        -http://www.cs.umd.edu/~liangjb/diff_fluids/diff_fluids_main.pdf

Comparison:
    -Solid and hollow object
    -Current methods for fluid control - speed, accuracy, usability
    -PPO and other rl algorithms
    -computational complexity - test time variability?
    -weather forecasting
    -doubly inverted pendulum

Stand-by:
    -Compositional programming interface
    -Inverse problems
        -Few-shot learning in new environments from footage
        -Function from shape
        -Aggregate statistics from motion
        -material estimation
            --"lagrangian fluid simulation with continuous convolutions"
    -Bi-stable, n-stable systems
    -equilibrium computation
    -condition on past - future prediction given qualitative in general morphologies.
    -evacuation of people (traffic flow)
    -applications with it's mostly interpretable knowledge
        -Information flow
        -free energy - variational models
        -Shape hallucination (tease out)
        -Turing machine equivalent - computational understanding
    -fluid testing simulation - morphology understanding, condition testing

Is there a weird result from understanding neural nets that can be explained by IB
